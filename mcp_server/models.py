# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:26:51+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Field, conint, constr


class Address(BaseModel):
    category: Optional[str] = Field(
        None,
        description='Category of the contact element',
        examples=['BUSINESS , PERSONAL , OTHER'],
    )
    cityName: Optional[constr(pattern=r'[a-zA-Z -]{1,35}')] = Field(
        None, description='Full city name. Example: Dublin'
    )
    countryCode: Optional[constr(pattern=r'[a-zA-Z]{2}')] = Field(
        None, description='ISO 3166-1 country code'
    )
    lines: Optional[List[str]] = Field(
        None,
        description='Line 1 = Street address, Line 2 = Apartment, suite, unit, building, floor, etc',
    )
    postalBox: Optional[str] = Field(None, description='E.g. BP 220')
    postalCode: Optional[str] = Field(None, description='Example: 74130')
    state: Optional[str] = Field(
        None, description='State, province or country name', examples=['Florida']
    )
    stateCode: Optional[constr(pattern=r'[a-zA-Z0-9]{1,2}')] = Field(
        None, description='State code (two character standard IATA state code)'
    )
    text: Optional[str] = Field(
        None,
        description='Field containing a full unformatted address. Only applicable when the fields lines, postalCode, countryCode, cityName are not filled.',
    )


class Aircraft(BaseModel):
    aircraftDescription: Optional[str] = Field(
        None, description='aircraft description (ex BOEING 737 ALL SERIES PASSENGER)'
    )
    aircraftType: Optional[str] = Field(
        None, description='aircraft type (ex 320, 777, ...)'
    )


class Arrival(BaseModel):
    iataCode: Optional[str] = Field(
        None, description='IATA location code', examples=['PAR']
    )
    name: Optional[str] = Field(
        None,
        description='Label associated to the location (e.g. Eiffel Tower, Madison Square)',
        examples=['Eiffel Tower'],
    )
    subtype: Optional[str] = Field(
        None,
        description='Location sub-type (e.g. airport, port, rail-station, restaurant, atm...)',
        examples=['Eiffel Tower'],
    )


class ArrivalAir(BaseModel):
    iataCode: Optional[str] = Field(
        None, description='IATA Airport code', examples=['JFK']
    )
    localDateTime: Optional[str] = Field(
        None,
        description='Local schedule dateTime of the departure or arrival. Conversion of dateTime in local date time.',
        examples=['2020-01-13T17:09:00'],
    )
    terminal: Optional[str] = Field(
        None, description='Terminal name / number', examples=['T2']
    )


class ArrivalAirportLocation(BaseModel):
    address: Optional[Address] = None
    name: Optional[str] = Field(
        None,
        description='Label associated to the location (e.g. Eiffel Tower, Madison Square)',
        examples=['Eiffel Tower'],
    )


class AssociatedEquipments(BaseModel):
    name: Optional[constr(pattern=r'[a-zA-Z]{1-70}')] = Field(
        None, description='Equipment name'
    )


class AssociationRefs(BaseModel):
    id: Optional[str] = Field(None, description='Id of related resource')
    type: Optional[str] = Field(None, description='Type of related resource')


class CarVehicle(BaseModel):
    acrissCode: Optional[str] = Field(
        None,
        description='Association of car rental industry systems standards',
        examples=['EDMR'],
    )
    carModel: Optional[str] = Field(
        None, description='Car model name', examples=[' Polo or similar']
    )
    doors: Optional[int] = Field(None, description='Number of doors')


class Carrier(BaseModel):
    name: Optional[str] = Field(None, description='Common name of the organization.')


class ContactHotel(BaseModel):
    phone: Optional[str] = Field(None, description='phome number')


class Departure(BaseModel):
    iataCode: Optional[str] = Field(
        None, description='IATA location code', examples=['PAR']
    )
    name: Optional[str] = Field(
        None,
        description='Label associated to the location (e.g. Eiffel Tower, Madison Square)',
        examples=['Eiffel Tower'],
    )
    subType: Optional[str] = Field(
        None,
        description='Location sub-type (e.g. airport, port, rail-station, restaurant, atm...)',
    )


class DepartureAir(BaseModel):
    checkInEndTime: Optional[str] = None
    iataCode: Optional[str] = Field(
        None, description='IATA Airport code', examples=['JFK']
    )
    localDateTime: Optional[str] = Field(
        None,
        description='Local schedule dateTime of the departure or arrival. Conversion of dateTime in local date time.',
        examples=['2020-01-13T17:09:00'],
    )
    terminal: Optional[str] = Field(
        None, description='Terminal name / number', examples=['T2']
    )


class DepartureAirportLocation(BaseModel):
    address: Optional[Address] = None
    name: Optional[str] = Field(
        None,
        description='Label associated to the location (e.g. Eiffel Tower, Madison Square)',
        examples=['Eiffel Tower'],
    )


class Description(BaseModel):
    text: Optional[str] = Field(
        None, description='Free Text', examples=['Do you need and example ?']
    )


class Category(Enum):
    BUSINESS = 'BUSINESS'
    PERSONAL = 'PERSONAL'
    OTHER = 'OTHER'


class Email(BaseModel):
    address: Optional[str] = Field(
        None, description='Email address (e.g. john@smith.com)'
    )
    category: Optional[Category] = Field(
        None, description='Category of the contact element'
    )


class End(BaseModel):
    address: Optional[Address] = None
    iataCode: Optional[str] = Field(
        None, description='IATA location code', examples=['PAR']
    )
    localDateTime: Optional[str] = Field(
        None,
        description='Local Date/Time of the itinerary end in format ISO 8601 (YYYY-MM-DDTHH:MM:SS)',
    )
    name: Optional[str] = Field(
        None,
        description='Label associated to the location (e.g. Eiffel Tower, Madison Square)',
        examples=['Eiffel Tower'],
    )


class FlightDesignator(BaseModel):
    carrierCode: Optional[str] = Field(
        None, description='Two letter IATA standard carrier code', examples=['6X']
    )
    flightNumber: Optional[str] = Field(
        None, description='1-4 digit number', examples=['333']
    )
    operationalSuffix: Optional[str] = Field(
        None, description='the operational suffix', examples=['A']
    )


class Guests(BaseModel):
    adults: Optional[conint(ge=1, multiple_of=9)] = Field(
        None, description='number of adult guests (1-9) per room', examples=['2']
    )
    childAge: Optional[List[int]] = Field(
        None,
        description='Comma separated list of ages of each child at the time of check-out from the hotel. If several children have the same age, the ages will be repeated.',
    )


class Source(BaseModel):
    example: Optional[str] = Field(
        None, description='A sample input to guide the user when resolving this issue'
    )
    parameter: Optional[str] = Field(
        None,
        description='The key of the URI path or query parameter that caused the error',
    )
    pointer: Optional[str] = Field(
        None,
        description='A JSON Pointer RFC6901 to the associated entity in the request body that caused this error',
    )


class Issue(BaseModel):
    code: Optional[int] = Field(
        None,
        description='A machine-readable error code from the Amadeus Canned Messages table, that will enable the API Consumers code to handle this type of error',
    )
    detail: Optional[str] = Field(
        None,
        description='An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this fieldâ€™s value can be localized.',
    )
    source: Optional[Source] = None
    status: Optional[int] = Field(
        None,
        description='The HTTP status code of this response. This is present only in terminal errors which cause an unsuccessful response. In the case of multiple errors, they must all have the same status.',
    )
    title: Optional[str] = Field(
        None,
        description='An error title from the Canned Messages table with a 1:1 correspondence to the error code. This may be localized',
    )


class Location(BaseModel):
    address: Optional[Address] = None
    iataCode: Optional[str] = Field(
        None, description='IATA location code', examples=['PAR']
    )


class Marketing(BaseModel):
    carrier: Optional[Carrier] = None
    flightDesignator: Optional[FlightDesignator] = None


class Meal(BaseModel):
    code: Optional[str] = Field(None, description='Code of the meal served on board')
    description: Optional[constr(min_length=1, max_length=199)] = Field(
        None, description='Description of the meal served on board'
    )


class Name(BaseModel):
    firstName: Optional[str] = Field(None, description='First name.')
    lastName: Optional[str] = Field(None, description='Last name.')
    middleName: Optional[str] = Field(
        None, description='Middle name(s), for example "Lee" in "John Lee Smith".'
    )
    prefix: Optional[str] = Field(None, description='Name prefix (e.g. Doctor)')
    suffix: Optional[str] = Field(
        None, description='Name suffix (e.g. Junior, III, etc).'
    )
    title: Optional[str] = Field(
        None,
        description='Contains all the suffixes and prefixes that can be appended to a name - Mr, Miss, Pr. - E.g. " Mr".',
    )


class Operating(BaseModel):
    carrier: Optional[Carrier] = None
    flightDesignator: Optional[FlightDesignator] = None


class Phone(BaseModel):
    category: Optional[Category] = Field(
        None, description='Category of the contact element'
    )
    countryCode: Optional[constr(pattern=r'[A-Z]{2}')] = Field(
        None,
        description='Country code of the country (ISO3166-1). E.g. "US" for the United States',
        examples=['FR'],
    )
    number: Optional[constr(pattern=r'{0-9]{1,15}')] = Field(
        None,
        description='Phone number. Composed of digits only. The number of digits depends on the country.',
        examples=['0336123123'],
    )


class Pickup(BaseModel):
    localDateTime: Optional[str] = Field(
        None, description='local date and time compliant with ISO8601.'
    )
    location: Optional[Location] = None


class Price(BaseModel):
    base: Optional[str] = None
    currency: Optional[str] = Field(
        None, description='currency Code apply to all elements of the price'
    )
    total: Optional[str] = Field(None, description='Total = base + totalTaxes +')
    totalTaxes: Optional[str] = None


class Seats(BaseModel):
    cabin: Optional[str] = Field(None, description='Cabin code associated to the seat')
    number: Optional[str] = Field(
        None,
        description="Seat number corresponding to the concatenation of the seatmap row and the column information, for example 12B'",
    )


class Stakeholder(BaseModel):
    age: Optional[int] = Field(
        None, description='Current age of the individual.', examples=['40']
    )
    dateOfBirth: Optional[str] = Field(
        None, description="The individual's date of birth.", examples=['1978-10-05']
    )
    id: Optional[str] = Field(
        None, description='item identifier', examples=['ABCDEF-2019-10-05-PT-1']
    )
    name: Optional[Name] = None
    nationality: Optional[str] = Field(
        None, description='Nationality of the Stakeholder'
    )
    passangerTypeCode: Optional[constr(max_length=3)] = Field(
        None,
        description='3-characters code defining the passenger type - possible values: ADT, CHD, INS, INF, UNA',
        examples=['ADT'],
    )


class Start(BaseModel):
    address: Optional[Address] = None
    iataCode: Optional[str] = Field(
        None, description='IATA location code', examples=['PAR']
    )
    localDateTime: Optional[str] = Field(
        None,
        description='Local Date/Time of the itinerary end in format ISO 8601 (YYYY-MM-DDTHH:MM:SS)',
    )
    name: Optional[str] = Field(
        None,
        description='Label associated to the location (e.g. Eiffel Tower, Madison Square)',
        examples=['Eiffel Tower'],
    )


class TravelAgency(BaseModel):
    address: Optional[Address] = None
    email: Optional[Email] = None
    officeName: Optional[str] = Field(
        None, description='Office name of the travel agency'
    )
    phone: Optional[Phone] = None


class TypeEstimated(BaseModel):
    bedType: Optional[str] = Field(None, description='Type of the bed')
    beds: Optional[int] = Field(None, description='Number of beds in the room (1-9)')
    category: Optional[str] = Field(None, description='Category code')


class Vehicle(BaseModel):
    code: Optional[str] = Field(None, examples=['TGD'])
    displayName: Optional[str] = Field(None, examples=['TGV 1253'])
    number: Optional[str] = Field(None, examples=['1234'])
    vehicleType: Optional[str] = Field(
        None,
        description='Code (codelist TVT) for the generic transport service returned, e.g. High speed, Intercities, Night and so on',
        examples=['005'],
    )


class Source1(BaseModel):
    example: Optional[str] = Field(
        None, description='A sample input to guide the user when resolving this issue'
    )
    parameter: Optional[str] = Field(
        None,
        description='The key of the URI path or query parameter that caused the warning',
    )
    pointer: Optional[str] = Field(
        None,
        description='A JSON Pointer RFC6901 to the associated entity in the request body that caused this warning',
    )


class Warnings(BaseModel):
    code: Optional[int] = Field(
        None,
        description='A machine-readable warning code from the Canned Messages table, that will enable the API Consumers code to handle this type of warning',
    )
    detail: Optional[str] = Field(
        None,
        description='An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this fieldâ€™s value can be localized.',
    )
    source: Optional[Source1] = Field(None, description='The Warning Source Definition')
    title: Optional[str] = Field(
        None,
        description='An warning title from the Canned Messages table with a 1:1 correspondence to the error code. This may be localized',
    )


class Weight(BaseModel):
    amount: Optional[str] = Field(
        None,
        description='Defines the weight value with the specified unit with decimal position.',
        examples=['125,5'],
    )


class Encoding(Enum):
    BASE_64 = 'BASE_64'
    BASE_64_URL = 'BASE_64_URL'


class MetaData(BaseModel):
    documentType: Optional[str] = Field(
        None,
        description='Type of the document in the payload defined by the "grammarOwner"',
        examples=['pdf, xml, json, jpg'],
    )
    encoding: Optional[Encoding] = Field(None, description='Example: BASE_64')
    name: Optional[str] = Field(
        None,
        description='Document name: name of the document in the payload (namespace, see domain)',
    )


class TravelTripParserPostRequest(BaseModel):
    metaData: Optional[MetaData] = Field(
        None,
        description='Meta data associated to payload inside document envelope, helping to read/understand the DocumentEnvelope payload.',
        title='DocumentEnvelope_MetaData',
    )
    payload: Optional[str] = Field(
        None,
        description='This contains the payload of the document. It can either be raw data or encoded data in b6se4. see details in metaData block.',
    )


class Seat(Seats):
    associationRefs: Optional[List[AssociationRefs]] = None


class Baggages(BaseModel):
    quantity: Optional[int] = Field(None, description='Total number of units')
    weight: Optional[Weight] = None


class Cancellation(BaseModel):
    description: Optional[Description] = None


class Contact(BaseModel):
    phone: Optional[Phone] = None


class Driver(BaseModel):
    contacts: Optional[List[Contact]] = None


class Dropoff(BaseModel):
    localDateTime: Optional[str] = Field(
        None, description='local date and time compliant with ISO8601.'
    )
    location: Optional[Location] = None


class Error400(BaseModel):
    errors: Optional[List[Issue]] = None


class Error500(BaseModel):
    errors: Optional[List[Issue]] = None


class Error501(BaseModel):
    errors: Optional[List[Issue]] = None


class Policies(BaseModel):
    cancellation: Optional[Cancellation] = None


class Room(BaseModel):
    type: Optional[constr(pattern=r'^[A-Z0-9*]{3}$')] = Field(
        None,
        description='Room type code, 3 character identifier of the room. The first character identifies the room type category. The second numeric character identifies the number of beds. The third character identifies the bed type. There is a special case where ROH is returned, this value stands for Run Of House.',
    )
    typeEstimated: Optional[TypeEstimated] = None


class TrainData(BaseModel):
    arrival: Optional[Arrival] = None
    arrivalDateTime: Optional[str] = Field(
        None,
        description='Date in ISO 8601 (http://www.w3.org/TR/NOTE-datetime), YYYY-MM-DDTHH:MM:SSZ.',
        examples=['2017-03-02T08:00:00Z'],
    )
    arrivalTrack: Optional[str] = Field(None, examples=['20'])
    bookingClass: Optional[constr(pattern=r'[a-zA-Z0-9]{1-2}')] = Field(
        None, description='Booking class'
    )
    confirmNbr: Optional[constr(pattern=r'[a-zA-Z0-9]{1-20}')] = Field(
        None, description='Confirmation number'
    )
    departure: Optional[Departure] = None
    departureDateTime: Optional[str] = Field(
        None,
        description='Date in ISO 8601 (http://www.w3.org/TR/NOTE-datetime), YYYY-MM-DDTHH:MM:SSZ.',
        examples=['2017-03-02T08:00:00Z'],
    )
    departureTrack: Optional[str] = Field(None, examples=['A'])
    duration: Optional[str] = Field(
        None,
        description='Duration in ISO 8601 / RFC 3339 (https://www.ietf.org/rfc/rfc3339.txt), P[n]Y[n]M[n]DT[n]H[n]M[n]S.',
        examples=['PT4H7'],
    )
    seats: Optional[List[Seats]] = None
    serviceProviderName: Optional[str] = Field(None, description='Provider name')
    vehicle: Optional[Vehicle] = None


class AirData(BaseModel):
    aircraft: Optional[Aircraft] = None
    arrival: Optional[ArrivalAir] = None
    arrivalAirportLocation: Optional[ArrivalAirportLocation] = None
    baggages: Optional[Baggages] = None
    confirmationNumber: Optional[str] = None
    departure: Optional[DepartureAir] = None
    departureAirportLocation: Optional[DepartureAirportLocation] = None
    marketing: Optional[Marketing] = None
    meal: Optional[Meal] = None
    operating: Optional[Operating] = None
    seats: Optional[List[Seat]] = None


class CarData(BaseModel):
    associatedEquipments: Optional[List[AssociatedEquipments]] = None
    confirmationNumber: Optional[constr(pattern=r'[a-zA-Z0-9]{1-20}')] = Field(
        None, description='Confirmation number'
    )
    driver: Optional[Driver] = None
    dropoff: Optional[Dropoff] = None
    pickup: Optional[Pickup] = None
    serviceProviderName: Optional[constr(max_length=70)] = Field(
        None, description='car provider information(Car rental compay name)'
    )
    vehicle: Optional[CarVehicle] = None


class HotelData(BaseModel):
    address: Optional[Address] = None
    amenities: Optional[List[str]] = Field(None, description='amenities (list)')
    checkInDate: Optional[str] = Field(
        None,
        description='heck-in date of the stay (hotel local date). Format YYYY-MM-DD The lowest accepted value is today date (no dates in the past).',
        examples=[' 2020-12-30'],
    )
    checkOutDate: Optional[str] = Field(
        None,
        description='check-out date of the stay (hotel local date). Format YYYY-MM-DD The lowest accepted value is checkInDate+1.',
        examples=['2020-12-31'],
    )
    confirmationNumber: Optional[constr(min_length=1, max_length=20)] = Field(
        None, description='Confirmation number'
    )
    contact: Optional[ContactHotel] = None
    description: Optional[Description] = None
    guests: Optional[Guests] = None
    name: Optional[str] = Field(
        None, description='Hotel Name', examples=['Hotel de Paris']
    )
    policies: Optional[Policies] = None
    room: Optional[Room] = None
    roomQuantity: Optional[conint(ge=1, multiple_of=9)] = Field(
        None, description='number of rooms (1-9)', examples=['1']
    )


class Train(BaseModel):
    train: Optional[TrainData] = None


class Air(BaseModel):
    air: Optional[AirData] = None


class Car(BaseModel):
    car: Optional[CarData] = None


class Hotel(BaseModel):
    hotel: Optional[HotelData] = None


class Trip(BaseModel):
    bookingDate: Optional[str] = Field(None, description='itinerary booking date')
    bookingNumber: Optional[str] = Field(
        None, description='Ticket No(Specially for Air and Train segment)'
    )
    creationDateTime: Optional[str] = Field(
        None,
        description='Date of the trip point optional time and time offset in ISO 8601 format, e.g. 2017-02-10T20:40:00+02:00',
    )
    description: Optional[constr(max_length=140)] = Field(
        None, description='Trip description'
    )
    end: Optional[End] = None
    price: Optional[Price] = None
    products: Optional[List[Union[Air, Hotel, Car, Train]]] = None
    provider: Optional[constr(pattern=r'[a-zA-Z0-9]{1-35}')] = Field(
        None, description='information of the booking provider'
    )
    reference: Optional[constr(pattern=r'[a-f0-9]{6,10}')] = Field(
        None, description='Reference of the Trip'
    )
    stakeholders: Optional[List[Stakeholder]] = None
    start: Optional[Start] = None
    title: Optional[constr(max_length=128)] = Field(
        None, description='Trip label or name'
    )
    travelAgency: Optional[TravelAgency] = None
    type: Optional[str] = Field(None, description='the resource name')


class TravelTripParserPostResponse(BaseModel):
    data: Trip
    warnings: Optional[List[Warnings]] = None
